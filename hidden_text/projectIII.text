% CMSC 423 Project III: Implement affine gap penalty DP for inexact matching (Smith-Waterman)

Posted: Oct. 31, 2013  
Last Update: Tue. Nov 19, 2013
Due: Nov. 19, 2013  

##Part I: Smith-Waterman algorithm  

For this project you will create a program that takes as input a
sequence and searches for all good alignments of this sequence inside
a database, using the Smith-Waterman dynamic programming local
alignment algorithm with affine gap penalties [described in
class](http://cbcb.umd.edu/~hcorrada/CMSC423/lectures/inexactMatching/gaps.pdf)
using the blosum62 substitution matrix (see below).


Inputs:

*	one query sequence in FASTA format  
*	multiple sequence database in FASTA format  
*	minimum % identity  
*	gap opening (creation) and extension penalty (i.e. using affine gaps)  


Outputs:

*	precise local alignment for all hits over %identity  

###Specification

1.	Your program will be exectued as follows:

```shell
python localalign.py <string:query.fa> <string:database.fa> <int:pctIdentity> <int:gapOpen> <int:gapExtend>
```

2.	The query and database files will be in FASTA format. You can use BioPython to read these files, or you can write your own code.  
3.	You can get the blosum62 substitution matrix from BioPython as follows:

```python
from Bio.SubsMat.MatrixInfo import blosum62
```

4.	% identity is defined as the proportion of identical characters over the aligned portions of the strings. See output below for an example. 
5.	Output format: The output of your program must follow the format shown below for each reported alignment. It includes
	-      The header from the fasta file 
	-      The alignment score obtained by local alignment algorithm 
	-      The number and percent of identities, i.e., the number of identical characters over the aligned portions. 
	-      The number and percent of gaps. 
	-      The start and end positions of the alignment for each string 
	-      The aligned substrings 
	-      The identities in the alignment 
If the strings are too long to be printed on one line (assume one line is 80 characters) you will need to wrap the 
alignment around on multiple lines. Here is an example:

<pre>
>gi|45198454|ref|NP_985483.1

Score = 188, Identities = 49/152 (32%), Gaps = 6/152 (3%)

Query 23   LPKTRTKALLTALTLAAAAAAAPALADVEFRHAL---DDSALDLSPIKGEEITDAVKSFR  79
      	    P         A       A   AL    FRH     D      S   G   T AV  F 
Text  3	   MPSFNRSIAISATLAVGLLAPVVALGQEVFRHTVTGEDLKIMETSQPSGRD-TEAVRNFL  61

Query 80   KDGVNPYNGNAEALAAGKTIYEDNCQACHLDDGRGGMGPSLIDNVFVNARANTDVGMFEI  139
             GVNPY    E LA G       C  CH   G G  GP L D         TD G FE 
Text  62   NTGVNPYTEVKEHLAKGEETFLSACSGCHGHFGEGKIGPGLNDSYWTYPKNKTDKGLFET  121

Query 140  IHSGASGAMRSFSQRGVTQDQILKVIAYIHSL  171
           I  GA G M          D IL V A    L
Text  122  IYGGAQGMMG--PHHDLELDEILTVMAWVRHL  151
</pre>

6.	You will use affine gaps as described in [lecture
notes](http://cbcb.umd.edu/~hcorrada/CMSC423/lectures/inexactMatching/gaps.pdf)
as opposed to the version in the book. Thus, the cost of a gap of
length $g$ is $gapOpen + g \times gapExtend$.

###Other notes
1.	 You cannot use any libraries or code you find on the internet
to calculate the alignments. You must write your own implementation of
the DP algorithm. 
2.  The `proj3` subdirectory in the class public directory contains test files you can use during development.

##Part II: The flu, the 2009 H1N1 outbreak, and resistant strains

For this part, you will analyze a small set of sequences for the [neuraminidase Influenza gene (NA)](http://en.wikipedia.org/wiki/Influenza_neuraminidase) for
nine H1N1 Human Influenza strains. We provide these in files `flustrains-query.fa` and `flustrains-db.fa` in the `proj3` subdirectory of the class
public directory.  The header line in each fasta file contains strain identifiers that include the location and year where that strain was observed.
You can get that information easily using BioPython. For example, this code snippet retrieves the identifiers for the sequences in the database file

```python
import re
from Bio import SeqIO

pat = re.compile('.*\[Influenza A virus \((.*)\)\]')
with open('flustrains-db.fa','r') as handle:
    for rec in SeqIO.parse(handle,'fasta'):
        match = pat.match(rec.description)
        print match.group(1)
```

```shell
A/Brisbane/59/2007(H1N1)
A/WS/1933(H1N1)
A/New Caledonia/20/1999(H1N1)
A/New Caledonia/9/2004(H1N1)
A/California/VRDL6/2010(H1N1)
A/New York/4662/2010(H1N1)
A/Quebec/147023/2009(H1N1)
A/Quebec/147365/2009(H1N1)
```

The year is given before `(H1N1)`, i.e., 2007, 1933, etc.

Run your local alignment program using files `flustrains-query.fa` and `flustrains-db.fa`, again using the blosum62
matrix, with gap open penalty -11 and gap extension penalty -1. Note the alignment score and percent identity for each of the eight strains in the database
against the query strain. 

**Question 1)** Is there a pattern in either alignment score, or percent identity by year? Prepare a table or plot that shows this.  
**Question 2)** There is a large gap in the alignment of the Netherlands strain (query) to the 1933 strain. Is that a deletion or an insertion in the query strain?  


A specific mutation (H275Y) in the NA gene confers resistance to [Oseltamivir](http://en.wikipedia.org/wiki/Neuraminidase_inhibitors), making
the drug [less effective](http://www.ncbi.nlm.nih.gov/pubmed/22837199). A note about nomenclature: the code H275Y
encodes a substitution in position 275, changing H (Histidine) to Y (Tyrosine).

**Question 3)** Can you tell from your alignments which of the nine strains (query and database) show this mutation?  

The last two strains are those from the individuals reported in ["Emergence of Oseltamivir-Resistant Pandemic H1N1 Virus during Prophylaxis"
N Engl J Med 2009; 361:2296-2297](http://www.nejm.org/doi/full/10.1056/NEJMc0910060). 

**Question 4)** Which of the last two sequences corresponds to the child (no mutation), and which is the fathers (with mutation)?

##Handing in

You will handin the following:

1.	Your `localalign.py` code and any other source files required for it to run.  
2.	All code you used to carry out your experiments  
3.	`writeup.pdf` answering the four questions in Part II

tar and zip these three files and use the `submit` script in grace to submit. Please figure out how to copy to and from the grace system
ahead of time so you can download your plots and upload your writeup without difficulties. Please learn how to use `scp`.



