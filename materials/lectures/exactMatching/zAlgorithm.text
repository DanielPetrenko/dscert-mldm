% Exact String Matching I: The z-algorithm
% CMSC423 Fall 2013
% Hector Corrada Bravo

Today we will begin discussing in detail the exact string matching problem we presented in the last lecture.

\begin{definition}[Exact String Matching Problem] Given a (long) string $T$ and a shorter string $P$, find all occurrences
of $P$ in $T$. Occurrences of $P$ may overlap.
\end{definition}

Applications:

1.	Mapping second-generation sequencing short reads (~150bp) to reference genome (~3 Bbp).  
2.	Find word occurrences in text documents. E.g., search function usage or definitions in code editor.  
3.	Keyword search in books, collection of books, or webpages  

Example:

```shell
T = ABCABCDABABCDABDABDE
P = ABCDABD
```

Q: Is there an occurrence of $P$ in $T$. If so, where?

We will discuss a few algorithms to solve this problem, starting with the z-algorithm today. In the analysis
of these algorithms we will treat 'character comparison' as a primitive operation. That is, we will analyze
these algorithms in terms of the number of character comparisons they perform.

The Naive Algorithm
-------------------

Here is pseudo-code for a naive algorithm to solve this problem:

```
for i = 1,...,|T|
	j =1 
	while P[j] == T[i+j-1] & j <= |P|
		j += 1
	if j == |P|+1
		return 'occurence in position i'
```

Q: What does this algorithm do?

In the worst case, this algorithm performs $O(|T| \times |P|)$ character comparisons. 

No information 